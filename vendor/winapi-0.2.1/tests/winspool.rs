// Copyright Â© 2015, skdltmxn
// Licensed under the MIT License <LICENSE.md>
#![cfg(windows)]
extern crate winspool;
use winspool::*;
#[inline(never)] fn bb<T>(_: T) {}
#[test]
fn functions() {
    bb(AbortPrinter);
    bb(AddFormA);
    bb(AddFormW);
    bb(AddJobA);
    bb(AddJobW);
    bb(AddMonitorA);
    bb(AddMonitorW);
    bb(AddPortA);
    bb(AddPortW);
    bb(AddPrintProcessorA);
    bb(AddPrintProcessorW);
    bb(AddPrintProvidorA);
    bb(AddPrintProvidorW);
    bb(AddPrinterA);
    bb(AddPrinterW);
    bb(AddPrinterConnectionA);
    bb(AddPrinterConnectionW);
    bb(AddPrinterConnection2A);
    bb(AddPrinterConnection2W);
    bb(AddPrinterDriverA);
    bb(AddPrinterDriverW);
    bb(AdvancedDocumentPropertiesA);
    bb(AdvancedDocumentPropertiesW);
    bb(ClosePrinter);
    bb(ConfigurePortA);
    bb(ConfigurePortW);
    bb(ConnectToPrinterDlg);
    bb(DeleteFormA);
    bb(DeleteFormW);
    bb(DeleteMonitorA);
    bb(DeleteMonitorW);
    bb(DeletePortA);
    bb(DeletePortW);
    bb(DeletePrintProcessorA);
    bb(DeletePrintProcessorW);
    bb(DeletePrintProvidorA);
    bb(DeletePrintProvidorW);
    bb(DeletePrinter);
    bb(DeletePrinterConnectionA);
    bb(DeletePrinterConnectionW);
    bb(DeletePrinterDataA);
    bb(DeletePrinterDataW);
    bb(DeletePrinterDriverA);
    bb(DeletePrinterDriverW);
    bb(DeviceCapabilitiesA);
    bb(DeviceCapabilitiesW);
    bb(DocumentPropertiesA);
    bb(DocumentPropertiesW);
    bb(EndDocPrinter);
    bb(EndPagePrinter);
    bb(EnumFormsA);
    bb(EnumFormsW);
    bb(EnumJobsA);
    bb(EnumJobsW);
    bb(EnumMonitorsA);
    bb(EnumMonitorsW);
    bb(EnumPortsA);
    bb(EnumPortsW);
    bb(EnumPrintProcessorDatatypesA);
    bb(EnumPrintProcessorDatatypesW);
    bb(EnumPrintProcessorsA);
    bb(EnumPrintProcessorsW);
    bb(EnumPrinterDataA);
    bb(EnumPrinterDataW);
    bb(EnumPrinterDriversA);
    bb(EnumPrinterDriversW);
    bb(EnumPrintersA);
    bb(EnumPrintersW);
    bb(ExtDeviceMode);
    bb(FindClosePrinterChangeNotification);
    bb(FindFirstPrinterChangeNotification);
    bb(FindNextPrinterChangeNotification);
    bb(GetDefaultPrinterA);
    bb(GetDefaultPrinterW);
    bb(GetFormA);
    bb(GetFormW);
    bb(GetJobA);
    bb(GetJobW);
    bb(GetPrintProcessorDirectoryA);
    bb(GetPrintProcessorDirectoryW);
    bb(GetPrinterA);
    bb(GetPrinterW);
    bb(GetPrinterDataA);
    bb(GetPrinterDataW);
    bb(GetPrinterDriverA);
    bb(GetPrinterDriverW);
    bb(GetPrinterDriverDirectoryA);
    bb(GetPrinterDriverDirectoryW);
    bb(OpenPrinterA);
    bb(OpenPrinterW);
    bb(PrinterMessageBoxA);
    bb(PrinterMessageBoxW);
    bb(PrinterProperties);
    bb(ReadPrinter);
    bb(ResetPrinterA);
    bb(ResetPrinterW);
    bb(ScheduleJob);
    bb(SetFormA);
    bb(SetFormW);
    bb(SetJobA);
    bb(SetJobW);
    bb(SetPrinterA);
    bb(SetPrinterW);
    bb(SetPrinterDataA);
    bb(SetPrinterDataW);
    bb(StartDocPrinterA);
    bb(StartDocPrinterW);
    bb(StartPagePrinter);
    bb(WaitForPrinterChange);
    bb(WritePrinter);
}
#[cfg(target_env = "msvc")]
#[test]
fn functions_msvc() {
    bb(CloseSpoolFileHandle);
    bb(CommitSpoolData);
    bb(DeletePrinterDataExA);
    bb(DeletePrinterDataExW);
    bb(DeletePrinterDriverExA);
    bb(DeletePrinterDriverExW);
    bb(DeletePrinterKeyA);
    bb(DeletePrinterKeyW);
    bb(EnumPrinterDataExA);
    bb(EnumPrinterDataExW);
    bb(EnumPrinterKeyA);
    bb(EnumPrinterKeyW);
    bb(FlushPrinter);
    bb(GetPrinterDataExA);
    bb(GetPrinterDataExW);
    bb(GetSpoolFileHandle);
    bb(IsValidDevmodeA);
    bb(IsValidDevmodeW);
    bb(SetDefaultPrinterA);
    bb(SetDefaultPrinterW);
    bb(SetPortA);
    bb(SetPortW);
    bb(XcvDataW);
}
