/*
Copyright 2020 Google LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

use crate::network;
use crate::providers::opennebula::ContextDrive;
use crate::providers::MetadataProvider;
use ipnetwork::{IpNetwork, Ipv4Network};
use std::net::{IpAddr, Ipv4Addr, Ipv6Addr};

#[test]
fn test_new() {
    let input = "
    # Context variables generated by OpenNebula
    NETWORK='YES'
    SSH_PUBLIC_KEY='ssh-rsa AAAABc123'
    "
    .to_string();
    ContextDrive::try_new_from_string(&input).unwrap();
}

#[test]
fn test_ssh_keys() {
    let input = "
    # Context variables generated by OpenNebula
    NETWORK='YES'
    SSH_PUBLIC_KEY='ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIKR89FoY+zBJX0i0V0MIL3BrTjcSllSO4bKKQ2ozB5R3'
    ".to_string();
    let drive = ContextDrive::try_new_from_string(&input).unwrap();
    let keys = drive.ssh_keys().unwrap();
    assert_eq!(
        keys[0].fingerprint(),
        "KA5yzDbmpEQtDpz0sXVYbsqv6mM9cX0CVqojc9eQiFM"
    )
}

#[test]
fn test_networks() {
    let input = "
    DISK_ID='1'
    ETH0_CONTEXT_FORCE_IPV4=''
    ETH0_DNS='8.8.8.8 8.8.4.4'
    ETH0_EXTERNAL=''
    ETH0_GATEWAY='192.168.2.1'
    ETH0_GATEWAY6=''
    ETH0_IP='192.168.2.50'
    ETH0_IP6='2001:db8:1234:5678::abcd'
    ETH0_IP6_PREFIX_LENGTH='64'
    ETH0_IP6_ULA=''
    ETH0_MAC='02:00:c0:a8:02:32'
    ETH0_MASK='255.255.255.0'
    ETH0_METRIC=''
    ETH0_METRIC6=''
    ETH0_MTU=''
    ETH0_NETWORK='192.168.2.0'
    ETH0_SEARCH_DOMAIN=''
    ETH0_VLAN_ID='1026'
    ETH0_VROUTER_IP=''
    ETH0_VROUTER_IP6=''
    ETH0_VROUTER_MANAGEMENT=''
    NETWORK='YES'
    "
    .to_string();
    let drive = ContextDrive::try_new_from_string(&input).unwrap();
    let networks = drive.networks().unwrap();
    println!("{:?}", networks[0]);
    // Basic checks
    assert_eq!(networks.clone().len(), 1);
    assert_eq!(networks.clone()[0].ip_addresses.len(), 2);
    // MAC
    assert_eq!(
        networks.clone()[0].mac_address.unwrap().to_string(),
        "02:00:c0:a8:02:32"
    );
    // Nameservers
    assert_eq!(networks.clone()[0].nameservers.len(), 2);
    assert_eq!(
        networks.clone()[0].nameservers[0],
        Ipv4Addr::new(8, 8, 8, 8)
    );
    assert_eq!(
        networks.clone()[0].nameservers[1],
        Ipv4Addr::new(8, 8, 4, 4)
    );
    // IPv4

    assert!(networks.clone()[0]
        .ip_addresses
        .contains(&IpNetwork::new(IpAddr::V4(Ipv4Addr::new(192, 168, 2, 50)), 24).unwrap()));
    assert_eq!(
        networks.clone()[0].routes[0],
        network::NetworkRoute {
            destination: IpNetwork::V4(Ipv4Network::new(Ipv4Addr::new(0, 0, 0, 0), 0).unwrap()),
            gateway: IpAddr::V4(Ipv4Addr::new(192, 168, 2, 1)),
        }
    );
    // IPv6
    assert!(networks.clone()[0].ip_addresses.contains(
        &IpNetwork::new(
            IpAddr::V6(Ipv6Addr::new(8193, 3512, 4660, 22136, 0, 0, 0, 43981)),
            64
        )
        .unwrap()
    ));
}

#[test]
fn test_hostname() {
    let input = "
    SET_HOSTNAME='flatcar-test'
    "
    .to_string();
    let drive = ContextDrive::try_new_from_string(&input).unwrap();
    assert_eq!(drive.hostname().unwrap().unwrap(), "flatcar-test");
}

#[test]
fn test_hostname_none() {
    let input = "
    NETWORK='YES'
    "
    .to_string();
    let drive = ContextDrive::try_new_from_string(&input).unwrap();
    assert_eq!(drive.hostname().unwrap(), None);
}

#[test]
fn test_attributes() {
    let input = "
    IS_SPECIAL='YES'
    "
    .to_string();
    let drive = ContextDrive::try_new_from_string(&input).unwrap();
    assert_eq!(
        drive.attributes().unwrap().get("ONE_IS_SPECIAL").unwrap(),
        "YES"
    )
}
