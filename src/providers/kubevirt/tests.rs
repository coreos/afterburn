use super::KubeVirtCloudConfig;
use crate::providers::MetadataProvider;

use std::path::Path;

#[test]
fn test_kubevirt_parse_full_metadata_json() {
    let fixture = Path::new("./tests/fixtures/kubevirt/full_metadata");
    let config = KubeVirtCloudConfig::try_new(fixture).expect("cannot parse config");
    let attrs = config.attributes().expect("cannot get attributes");
    assert_eq!(attrs.len(), 3);
    assert_eq!(
        attrs.get("KUBEVIRT_INSTANCE_ID"),
        Some(&"5d307ca9-b3ef-428c-8861-06e72d69f223".to_string())
    );
    assert_eq!(
        attrs.get("KUBEVIRT_HOSTNAME"),
        Some(&"test_instance-kubevirt.foo.cloud".to_string())
    );
    assert_eq!(
        attrs.get("KUBEVIRT_INSTANCE_TYPE"),
        Some(&"some_type".to_string())
    );
    let obtained_ssh_keys = config.ssh_keys().expect("cannot extract public ssh keys");
    let expect_ssh_keys = openssh_keys::PublicKey::parse("ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAgQDYVEprvtYJXVOBN0XNKVVRNCRX6BlnNbI+USLGais1sUWPwtSg7z9K9vhbYAPUZcq8c/s5S9dg5vTHbsiyPCIDOKyeHba4MUJq8Oh5b2i71/3BISpyxTBH/uZDHdslW2a+SrPDCeuMMoss9NFhBdKtDkdG9zyi0ibmCP6yMdEX8Q== Generated by Nova").expect("cannot parse expected ssh key");
    assert_eq!(obtained_ssh_keys.len(), 1);
    assert_eq!(obtained_ssh_keys[0], expect_ssh_keys);
}
