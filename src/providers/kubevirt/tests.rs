use super::KubeVirtCloudConfig;
use crate::network::DhcpSetting;
use crate::providers::MetadataProvider;

use ipnetwork::IpNetwork;
use std::net::IpAddr;
use std::path::Path;
use std::str::FromStr;

#[test]
fn test_kubevirt_parse_full_metadata_json() {
    let fixture = Path::new("./tests/fixtures/kubevirt/full_metadata");
    let config = KubeVirtCloudConfig::try_new(fixture).expect("cannot parse config");
    let attrs = config.attributes().expect("cannot get attributes");
    assert_eq!(attrs.len(), 3);
    assert_eq!(
        attrs.get("KUBEVIRT_INSTANCE_ID"),
        Some(&"5d307ca9-b3ef-428c-8861-06e72d69f223".to_string())
    );
    assert_eq!(
        attrs.get("KUBEVIRT_HOSTNAME"),
        Some(&"test_instance-kubevirt.foo.cloud".to_string())
    );
    assert_eq!(
        attrs.get("KUBEVIRT_INSTANCE_TYPE"),
        Some(&"some_type".to_string())
    );
    let obtained_ssh_keys = config.ssh_keys().expect("cannot extract public ssh keys");
    let expect_ssh_keys = openssh_keys::PublicKey::parse("ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAgQDYVEprvtYJXVOBN0XNKVVRNCRX6BlnNbI+USLGais1sUWPwtSg7z9K9vhbYAPUZcq8c/s5S9dg5vTHbsiyPCIDOKyeHba4MUJq8Oh5b2i71/3BISpyxTBH/uZDHdslW2a+SrPDCeuMMoss9NFhBdKtDkdG9zyi0ibmCP6yMdEX8Q== Generated by Nova").expect("cannot parse expected ssh key");
    assert_eq!(obtained_ssh_keys.len(), 1);
    assert_eq!(obtained_ssh_keys[0], expect_ssh_keys);
}

#[test]
fn test_network_data() {
    let fixture_path = "./tests/fixtures/kubevirt/config_drive";
    let fixture = Path::new(fixture_path);
    let config = KubeVirtCloudConfig::try_new(fixture).expect(fixture_path);
    let interfaces = config.networks().expect(fixture_path);

    assert_eq!(
        interfaces.len(),
        3,
        "Expected 3 interfaces, got {} interfaces: {:?}",
        interfaces.len(),
        interfaces
    );

    let eth0 = &interfaces[0];
    let eth1 = &interfaces[1];
    let eth2 = &interfaces[2];

    assert_eq!(
        eth0.name,
        Some("eth0".to_string()),
        "Expected eth0.name to be {:?}, got {:?}",
        Some("eth0".to_string()),
        eth0.name
    );
    assert_eq!(
        eth0.ip_addresses.len(),
        2,
        "Expected eth0 to have 2 IP addresses, got {} addresses: {:?}",
        eth0.ip_addresses.len(),
        eth0.ip_addresses
    );
    assert!(
        eth0.ip_addresses
            .contains(&IpNetwork::from_str("192.168.1.10/24").unwrap()),
        "Expected eth0.ip_addresses to contain 192.168.1.10/24, but got: {:?}",
        eth0.ip_addresses
    );
    assert!(
        eth0.ip_addresses
            .contains(&IpNetwork::from_str("2001:db8::10/64").unwrap()),
        "Expected eth0.ip_addresses to contain 2001:db8::10/64, but got: {:?}",
        eth0.ip_addresses
    );
    assert_eq!(
        eth0.routes.len(),
        2,
        "Expected eth0 to have 2 routes, got {} routes: {:?}",
        eth0.routes.len(),
        eth0.routes
    );
    assert!(
        eth0.routes
            .iter()
            .any(|r| r.gateway == IpAddr::from_str("192.168.1.1").unwrap()),
        "Expected eth0.routes to contain gateway 192.168.1.1, but got routes: {:?}",
        eth0.routes
    );
    assert!(
        eth0.routes
            .iter()
            .any(|r| r.gateway == IpAddr::from_str("2001:db8::1").unwrap()),
        "Expected eth0.routes to contain gateway 2001:db8::1, but got routes: {:?}",
        eth0.routes
    );
    assert_eq!(
        eth0.nameservers.len(),
        4,
        "Expected eth0 to have 4 nameservers, got {} nameservers: {:?}",
        eth0.nameservers.len(),
        eth0.nameservers
    );
    assert!(
        eth0.nameservers
            .contains(&IpAddr::from_str("8.8.8.8").unwrap()),
        "Expected eth0.nameservers to contain 8.8.8.8, but got: {:?}",
        eth0.nameservers
    );
    assert!(
        eth0.nameservers
            .contains(&IpAddr::from_str("8.8.4.4").unwrap()),
        "Expected eth0.nameservers to contain 8.8.4.4, but got: {:?}",
        eth0.nameservers
    );
    assert!(
        eth0.nameservers
            .contains(&IpAddr::from_str("2001:4860:4860::8888").unwrap()),
        "Expected eth0.nameservers to contain 2001:4860:4860::8888, but got: {:?}",
        eth0.nameservers
    );
    assert!(
        eth0.nameservers
            .contains(&IpAddr::from_str("2001:4860:4860::8844").unwrap()),
        "Expected eth0.nameservers to contain 2001:4860:4860::8844, but got: {:?}",
        eth0.nameservers
    );
    assert_eq!(
        eth1.name,
        Some("eth1".to_string()),
        "Expected eth1.name to be {:?}, got {:?}",
        Some("eth1".to_string()),
        eth1.name
    );
    assert_eq!(
        eth1.dhcp,
        Some(DhcpSetting::Both),
        "Expected eth1.dhcp to be {:?}, got {:?}",
        Some(DhcpSetting::Both),
        eth1.dhcp
    );
    assert_eq!(
        eth1.ip_addresses.len(),
        0,
        "Expected eth1 to have 0 IP addresses, got {} addresses: {:?}",
        eth1.ip_addresses.len(),
        eth1.ip_addresses
    );
    assert_eq!(
        eth1.nameservers.len(),
        4,
        "Expected eth1 to have 4 nameservers, got {} nameservers: {:?}",
        eth1.nameservers.len(),
        eth1.nameservers
    );
    assert_eq!(
        eth2.name, None,
        "Expected eth2.name to be None (no name field in JSON), got {:?}",
        eth2.name
    );
    assert_eq!(
        eth2.dhcp,
        Some(DhcpSetting::V4),
        "Expected eth2.dhcp to be {:?}, got {:?}",
        Some(DhcpSetting::V4),
        eth2.dhcp
    );
    assert_eq!(
        eth2.ip_addresses.len(),
        0,
        "Expected eth2 to have 0 IP addresses, got {} addresses: {:?}",
        eth2.ip_addresses.len(),
        eth2.ip_addresses
    );
    assert_eq!(
        eth2.nameservers.len(),
        4,
        "Expected eth2 to have 4 nameservers, got {} nameservers: {:?}",
        eth2.nameservers.len(),
        eth2.nameservers
    );
    let kargs = config.rd_network_kargs().unwrap().unwrap();
    let kargs_parts: Vec<&str> = kargs.split_whitespace().collect();
    assert_eq!(
        kargs_parts.len(),
        8,
        "Expected kargs to have 8 parts (3 ip configs + 4 nameservers + 1 dhcp), got {} parts: {:?}",
        kargs_parts.len(),
        kargs_parts
    );
    assert!(
        kargs.contains("ip=eth1:dhcp,dhcp6"),
        "Expected kargs to contain 'ip=eth1:dhcp,dhcp6', but got: {:?}",
        kargs
    );
    assert!(
        kargs.contains("ip=06:aa:bb:cc:dd:02:dhcp"),
        "Expected kargs to contain 'ip=06:aa:bb:cc:dd:02:dhcp', but got: {:?}",
        kargs
    );
    assert!(
        kargs.contains("ip=192.168.1.10::192.168.1.1:255.255.255.0::eth0:static"),
        "Expected kargs to contain 'ip=192.168.1.10::192.168.1.1:255.255.255.0::eth0:static', but got: {:?}",
        kargs
    );
    assert!(
        kargs.contains("ip=2001:db8::10::2001:db8::1:64::eth0:static"),
        "Expected kargs to contain 'ip=2001:db8::10::2001:db8::1:64::eth0:static', but got: {:?}",
        kargs
    );
    // Check that nameservers are included as separate arguments
    assert!(
        kargs.contains("nameserver=8.8.8.8"),
        "Expected kargs to contain 'nameserver=8.8.8.8', but got: {:?}",
        kargs
    );
    assert!(
        kargs.contains("nameserver=8.8.4.4"),
        "Expected kargs to contain 'nameserver=8.8.4.4', but got: {:?}",
        kargs
    );
    assert!(
        kargs.contains("nameserver=2001:4860:4860::8888"),
        "Expected kargs to contain 'nameserver=2001:4860:4860::8888', but got: {:?}",
        kargs
    );
    assert!(
        kargs.contains("nameserver=2001:4860:4860::8844"),
        "Expected kargs to contain 'nameserver=2001:4860:4860::8844', but got: {:?}",
        kargs
    );
    let attrs = config.attributes().expect(fixture_path);
    assert_eq!(
        attrs.get("KUBEVIRT_IPV4"),
        Some(&"192.168.1.10".to_string()),
        "Expected KUBEVIRT_IPV4 to be {:?}, got {:?}",
        Some(&"192.168.1.10".to_string()),
        attrs.get("KUBEVIRT_IPV4")
    );
    assert_eq!(
        attrs.get("KUBEVIRT_IPV6"),
        Some(&"2001:db8::10".to_string()),
        "Expected KUBEVIRT_IPV6 to be {:?}, got {:?}",
        Some(&"2001:db8::10".to_string()),
        attrs.get("KUBEVIRT_IPV6")
    );
}
